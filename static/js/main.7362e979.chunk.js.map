{"version":3,"sources":["components/GameBanner.js","components/BoardCell.js","logosArray.js","containers/GameBoard.js","components/MenuTime.js","components/MenuInfo.js","containers/GameMenu.js","components/GameOver.js","App.js","serviceWorker.js","index.js"],"names":["GameBanner","className","BoardCell","this","props","logoPath","logoID","isHidden","cellIndex","cellImgPath","onClick","handleCellClick","src","alt","React","Component","logosArray","id","link","is_hidden","GameBoard","shuffleArray","arr","sort","Math","random","getRandomLogosFromResources","NUMBER_OF_NEEDED_IMG","state","chosenLogos","length","addIndexForElements","map","elem","index","duplicateArrayElements","concat","createRandomPairsFromChosenLogos","pairsLogos","logosWithIndex","handleClick","console","log","randomPairs","lastLogoID","lastCellIndex","click","remain","setState","gameStatus","setTimeout","bind","startTimer","neededImages","boardSize","isOver","onGameOver","centerCellIndex","boardCells","forEach","cell","push","key","MenuTime","time","MenuInfo","level","score","GameMenu","GameOver","handleRestartGame","App","timer","passGameStatusToMenu","handleGameOver","stopTimer","setTime","formatTime","sec","padTime","min","parseInt","timeString","setInterval","clearInterval","window","location","reload","formatedTime","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7362e979.chunk.js","sourcesContent":["import React from 'react';\n\nconst GameBanner = () => {\n    return (\n        <div>\n            <h1 className=\"text-center text-primary py-3\"><b>React Memory Game</b></h1>\n        </div>\n    );\n}\n\nexport default GameBanner;","import React from \"react\";\n\n// const BoardCell = ({ logoSrc, isHidden }) => {\n//     const hiddenLogoPath = \"./logo/question-block.svg\";\n//     let cellImgPath = isHidden ? hiddenLogoPath : logoSrc;\n\n//     return (\n//         <div className=\"board-cell\">\n//             <img src={cellImgPath} alt=\"missing\" />\n//         </div>\n//     );\n// }\n\nclass BoardCell extends React.Component {\n  render() {\n    let { logoPath, logoID, isHidden, cellIndex } = this.props;\n    const hiddenLogoPath = \"./logo/question-block.svg\";\n    let cellImgPath = isHidden ? hiddenLogoPath : logoPath;\n\n    return (\n      <div className=\"board-cell\" onClick={() => this.props.handleCellClick(logoID, cellIndex, isHidden)}>\n        <img src={cellImgPath} alt=\"missing\" />\n      </div>\n    );\n  }\n}\n\nexport default BoardCell;\n","const logosArray = [\n    {\n        id: 1,\n        link: \"./logo/angular.svg\",\n        is_hidden: true\n    },\n    {\n        id: 2,\n        link:  \"./logo/go.svg\",\n        is_hidden: true\n    },\n    {\n        id: 3,\n        link:  \"./logo/c-sharp.svg\",\n        is_hidden: true\n    },\n    {\n        id: 4,\n        link:  \"./logo/grunt.svg\",\n        is_hidden: true\n    },\n    {\n        id: 5,\n        link:  \"./logo/java.svg\",\n        is_hidden: true\n    },\n    {\n        id: 6,\n        link:  \"./logo/js.svg\",\n        is_hidden: true\n    },\n    {\n        id: 7,\n        link:  \"./logo/kotlin.svg\",\n        is_hidden: true\n    },\n    {\n        id: 8,\n        link:  \"./logo/npm.svg\",\n        is_hidden: true\n    },\n    {\n        id: 9,\n        link:  \"./logo/php.svg\",\n        is_hidden: true\n    },\n    {\n        id: 10,\n        link:  \"./logo/python.svg\",\n        is_hidden: true\n    },\n    {\n        id: 11,\n        link:  \"./logo/reactjs.svg\",\n        is_hidden: true\n    },\n    {\n        id: 12,\n        link:  \"./logo/ruby.svg\",\n        is_hidden: true\n    },\n    {\n        id: 13,\n        link:  \"./logo/swift.svg\",\n        is_hidden: true\n    },\n    {\n        id: 14,\n        link:  \"./logo/ts.svg\",\n        is_hidden: true\n    },\n    {\n        id: 15,\n        link:  \"./logo/vuejs.svg\",\n        is_hidden: true\n    }\n]\n\nexport default logosArray;","import React from \"react\";\nimport BoardCell from \"../components/BoardCell\";\nimport logosArray from \"../logosArray\";\n\nclass GameBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    const neededImages = ~~(props.boardSize ** 2 / 2);\n    this.state = {\n      NUMBER_OF_NEEDED_IMG: neededImages, // parse to int\n      randomPairs: [],\n      lastLogoID: null,\n      lastCellIndex: null,\n      isOver: false,\n      click: 1,\n      remain: neededImages * 2\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    // Get random logos from resources when app started\n    this.setState({\n      randomPairs: this.createRandomPairsFromChosenLogos()\n    });\n  }\n\n  componentDidUpdate() {\n    const { remain, isOver } = this.state;\n    // Check game over\n    if (!isOver && remain === 0) {\n      this.setState({\n        isOver: true\n      });\n      this.props.onGameOver(true);\n      console.log(\"GAME OVER !\");\n    }\n  }\n\n  shuffleArray = arr => {\n    let dumpArr = [...arr];\n    return dumpArr.sort(() => 0.5 - Math.random());\n  };\n\n  getRandomLogosFromResources = () => {\n    let { NUMBER_OF_NEEDED_IMG } = this.state;\n    let chosenLogos = this.shuffleArray(logosArray);\n    // Cut needed images\n    chosenLogos.length = NUMBER_OF_NEEDED_IMG;\n    return [...chosenLogos];\n  };\n  // To make sure element is unique\n  addIndexForElements = arr => {\n    return arr.map((elem, index) => ({\n      ...elem,\n      index: index\n    }));\n  };\n\n  duplicateArrayElements = arr => {\n    return arr.concat(arr);\n  };\n\n  createRandomPairsFromChosenLogos = () => {\n    let chosenLogos = this.getRandomLogosFromResources();\n    let pairsLogos = this.duplicateArrayElements(chosenLogos);\n    let logosWithIndex = this.addIndexForElements(pairsLogos);\n    return this.shuffleArray(logosWithIndex);\n  };\n\n  handleClick = (logoID, cellIndex, isHidden) => {\n    if (cellIndex === -1 || isHidden === false) return;\n    console.log(\"id:\", logoID + \", index:\" + cellIndex);\n    let { randomPairs, lastLogoID, lastCellIndex, click, remain } = this.state;\n    randomPairs[cellIndex].is_hidden = false;\n\n    if (lastLogoID !== null) {\n      if (lastLogoID === logoID) {\n        console.log(\"found\");\n        this.setState(\n          {\n            lastLogoID: null,\n            lastCellIndex: null,\n            remain: remain - 2\n          },\n          () => {\n            // Update status immediately when found\n            remain = this.state.remain;\n            this.props.gameStatus({ click, remain });\n          }\n        );\n      } else {\n        setTimeout(\n          function() {\n            randomPairs[lastCellIndex].is_hidden = true;\n            randomPairs[cellIndex].is_hidden = true;\n            this.setState({\n              lastLogoID: null,\n              lastCellIndex: null\n            });\n          }.bind(this),\n          500\n        );\n      }\n    } else {\n      this.setState({\n        lastLogoID: logoID,\n        lastCellIndex: cellIndex\n      });\n    }\n    // Update after click\n    this.setState(\n      {\n        randomPairs,\n        click: click + 1\n      },\n      () => {\n        if (this.state.click === 2) this.props.startTimer();\n      }\n    );\n    let gameStatus = {\n      click: click,\n      remain: remain\n    };\n    this.props.gameStatus(gameStatus);\n  };\n\n  render() {\n    const luckyLogoPath = \"./logo/star.svg\";\n    const centerCellIndex = this.state.NUMBER_OF_NEEDED_IMG;\n    let { randomPairs } = this.state;\n    let boardCells = [];\n\n    randomPairs.forEach((cell, index) => {\n      if (index === centerCellIndex) {\n        boardCells.push(\n          <BoardCell\n            handleCellClick={this.handleClick}\n            logoPath={luckyLogoPath}\n            logoID={-1}\n            isHidden={false}\n            cellIndex={-1}\n            key={-1}\n          />\n        );\n      }\n      boardCells.push(\n        <BoardCell\n          handleCellClick={this.handleClick}\n          logoPath={cell.link}\n          logoID={cell.id}\n          isHidden={cell.is_hidden}\n          cellIndex={index}\n          key={index}\n        />\n      );\n    });\n\n    return <div className=\"game-board\">{boardCells}</div>;\n  }\n}\n\nexport default GameBoard;\n","import React from \"react\";\n\nconst MenuTime = ({ time }) => {\n  return (\n    <div className=\"clock text-center text-success\">\n      {time}\n    </div>\n  );\n};\n\nexport default MenuTime;\n","import React from \"react\";\n\nconst MenuInfo = ({ level, boardSize, score, click, remain }) => {\n  return (\n    <div className=\"info\">\n      <table className=\"info--table\">\n        <tbody>\n          <tr>\n            <th>Level:</th>\n            <td>{level}</td>\n          </tr>\n          <tr>\n            <th>Size:</th>\n            <td>\n              {boardSize} x {boardSize}\n            </td>\n          </tr>\n          <tr>\n            <th>Score:</th>\n            <td>{score}</td>\n          </tr>\n          <tr>\n            <th>Click:</th>\n            <td>{click}</td>\n          </tr>\n          <tr>\n            <th>Remain:</th>\n            <td>{remain}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default MenuInfo;\n","import React from \"react\";\nimport MenuTime from \"../components/MenuTime\";\nimport MenuInfo from \"../components/MenuInfo\";\n\nclass GameMenu extends React.Component {\n  render() {\n    let { click, remain, time } = this.props;\n    return (\n      <div className=\"game-menu\">\n        <div className=\"game-menu--top\">\n          <MenuTime time={time} />\n        </div>\n        <div className=\"game-menu--bottom\">\n          <MenuInfo \n            level={\"medium\"}\n            boardSize={this.props.boardSize}\n            score={this.props.score}\n            click={click}\n            remain={remain}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameMenu;\n","import React from \"react\";\n\nconst GameOver = ({ click, time, score, handleRestartGame }) => {\n  return (\n    <div className=\"game-over shadow\">\n      <div className=\"header\">You win !</div>\n      <div className=\"body\">\n        <div>\n          Time: <b>{time}</b>s &nbsp;Click: <b>{click}</b>\n        </div>\n        <div>\n          Total score: <b>{score}</b>\n        </div>\n      </div>\n      <button\n        className=\"btn btn-lg btn-block btn-success\"\n        onClick={handleRestartGame}\n      >\n        Play again\n      </button>\n    </div>\n  );\n};\n\nexport default GameOver;\n","/* eslint-disable react/jsx-no-undef */\nimport React from \"react\";\nimport GameBanner from \"./components/GameBanner\";\nimport GameBoard from \"./containers/GameBoard\";\nimport GameMenu from \"./containers/GameMenu\";\nimport GameOver from \"./components/GameOver\";\n\nclass App extends React.Component {\n  state = {\n    boardSize: 5,\n    time: 0,\n    click: 0,\n    remain: 24,\n    isOver: false,\n    timer: null,\n    score: 0\n  };\n\n  passGameStatusToMenu = gameStatus => {\n    this.setState({\n      click: gameStatus.click,\n      remain: gameStatus.remain\n    });\n  };\n\n  handleGameOver = isOver => {\n    this.stopTimer();\n    this.setState({\n      isOver: true\n    });\n  };\n\n  setTime = () => {\n    this.setState({\n      time: this.state.time + 1\n    });\n  };\n\n  formatTime = () => {\n    let { time } = this.state;\n    let sec = this.padTime(time % 60);\n    let min = parseInt(time / 60);\n    let clock = `${min}:${sec}`;\n    return clock;\n  };\n\n  padTime = time => {\n    let timeString = time + \"\";\n    if (timeString.length < 2) {\n      return \"0\" + timeString;\n    } else return timeString;\n  };\n\n  startTimer = () => {\n    console.log(\"Timer started\");\n    let timer = setInterval(this.setTime, 1000);\n    this.setState({ timer: timer });\n  };\n\n  stopTimer = timer => {\n    this.setState({\n      timer: clearInterval(this.state.timer)\n    });\n  };\n\n  handleRestartGame = () => {\n    console.log(\"Game restarted\");\n    window.location.reload();\n    // this.setState({\n    //   isOver: false,\n    //   click: 0,\n    //   time: 0,\n    //   willRestart: true\n    // });\n  };\n\n  render() {\n    let { boardSize, click, remain, time } = this.state;\n    let formatedTime = this.formatTime();\n    let score = parseInt((click * 1000) / time) || 0;\n    return (\n      <div className=\"container\">\n        <GameBanner />\n        <div className=\"game\">\n          <GameBoard\n            boardSize={boardSize}\n            gameStatus={this.passGameStatusToMenu}\n            startTimer={this.startTimer}\n            onGameOver={this.handleGameOver}\n          />\n          <GameMenu\n            boardSize={boardSize}\n            click={click}\n            remain={remain}\n            time={formatedTime}\n            score={score}\n          />\n\n          {this.state.isOver ? (\n            <GameOver\n              time={time}\n              click={click}\n              score={score}\n              handleRestartGame={this.handleRestartGame}\n            />\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.scss';\nimport * as serviceWorker from './serviceWorker';\n// Add bootstrap to project\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}